import argparse
import math
import os

from tqdm import tqdm
import numpy as np
import quaternion
import matplotlib.pyplot as plt

from ..evaluate import HEADER


def main():
    parser = argparse.ArgumentParser("write here script description")
    parser.add_argument("--path", type=str, required=True, help='path to results csv file generated by evaluate.py')
    args = parser.parse_args()

    rawdata = []
    with open(args.path) as fh:
        mapping = None
        for line in fh:
            fields = line.split('\t')
            if mapping is None:
                if len(fields) > 20 and set(fields).issubset(HEADER):
                    mapping = dict([(h, fields.index(h)) for h in HEADER if h in fields])
            else:
                rawdata.append([fields[mapping[h]] if h in mapping else np.nan for h in HEADER])
    assert mapping is not None, 'could not find header row in file %s' % (args.path,)
    assert len(rawdata) > 0, 'could not find any data rows in file %s' % (args.path,)
    assert HEADER == ['Dataset', 'aflow', 'img1', 'img2', 'light1_x', 'light1_y', 'light1_z', 'light2_x', 'light2_y',
                      'light2_z', 'rel_qw', 'rel_qx', 'rel_qy', 'rel_qz', 'rel_angle', 'rel_dist',  'FD', 'M-Score',
                      'MMA', 'LE', 'mAP', 'ori-err', 'est_qw', 'est_qx', 'est_qy', 'est_qz'], \
           'Header from evaluate.py does not correspond to current code'

    rawdata = np.array(rawdata, type=object)
    info = rawdata[:, 0:4]
    light1 = rawdata[:, 4:7].atype(float)
    light2 = rawdata[:, 7:10].atype(float)
    rel_q = [np.quaternion(*q) for q in rawdata[:, 10:14].astype(float)]
    rel_angle = rawdata[:, 14].atype(float)
    rel_dist = rawdata[:, 15].atype(float)
    feat_density = rawdata[:, 16].atype(float)
    mscore = rawdata[:, 17].atype(float)
    mma = rawdata[:, 18].atype(float)
    locerr = rawdata[:, 19].atype(float)
    map = rawdata[:, 20].atype(float)
    orierr = rawdata[:, 21].atype(float)
    est_q = [np.quaternion(*q) for q in rawdata[:, 22:26].astype(float)]

    # TODO: continue here


if __name__ == '__main__':
    main()
